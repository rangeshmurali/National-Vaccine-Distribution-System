/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package UserInterface.PublicHealthDepartmentWorkArea;

import Business.Employee.Employee;
import Business.Enterprise.ProviderEnterprise;
import Business.Enterprise.PublicHealthEnterprise;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.EnrollmentRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author rangeshmurali
 */
public class EnrollmentApprovalJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private PublicHealthEnterprise publicHealthEnterprise;
    private UserAccount userAccount;
    
    public EnrollmentApprovalJPanel(JPanel userProcessContainer, PublicHealthEnterprise publicHealthEnterprise, UserAccount userAccount) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.publicHealthEnterprise = publicHealthEnterprise;
        this.userAccount = userAccount;
        populateProviderComboBox();
    }
    
    public void populateProviderComboBox(){
        providerJComboBox.removeAllItems();
        providerJComboBox.addItem("Hospital");
        providerJComboBox.addItem("Pharmacy");
    }
    
    public void populateHosptialTable(){
        DefaultTableModel dtm = (DefaultTableModel) messageJTable.getModel();
        dtm.setRowCount(0);
        
        for(WorkRequest request : publicHealthEnterprise.getWorkQueue().getWorkRequestList()){
            if(request.getRequestType().equalsIgnoreCase("Enrollment Request")){
                if(request.getSender().getEmployee().getCheck().equalsIgnoreCase("Hospital")){
                    Object[] row = new Object[5];
                    row[0] = request;
                    row[1] = request.getSender().getEmployee().getHospital();
                    row[2] = request.getSender();
                    row[3] = request.getReceiver() == null? null : request.getReceiver();
                    row[4] = request.getStatus();
                    dtm.addRow(row);
                }
            }
        }
    }
    
    public void populatePharmacyTable(){
        DefaultTableModel dtm = (DefaultTableModel) messageJTable.getModel();
        dtm.setRowCount(0);
        
        for(WorkRequest request : publicHealthEnterprise.getWorkQueue().getWorkRequestList()){
            if(request.getRequestType().equalsIgnoreCase("Enrollment Request")){
                if(request.getSender().getEmployee().getCheck().equalsIgnoreCase("Pharmacy")){
                    Object[] row = new Object[5];
                    row[0] = request;
                    row[1] = request.getSender().getEmployee().getPharmacy();
                    row[2] = request.getSender();
                    row[3] = request.getReceiver() == null? null : request.getReceiver();
                    row[4] = request.getStatus();
                    dtm.addRow(row);
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        assignJButton = new javax.swing.JButton();
        approveJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();
        rejectJButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        messageJTable = new javax.swing.JTable();
        providerJComboBox = new javax.swing.JComboBox();

        assignJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        assignJButton.setText("Assign to Me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });

        approveJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        approveJButton.setText("Approve Enrollment");
        approveJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                approveJButtonActionPerformed(evt);
            }
        });

        backJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        rejectJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rejectJButton.setText("Reject Enrollment");
        rejectJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rejectJButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Enrollment Request");

        messageJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Message", "Provider Name", "Sender", "Receiver", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(messageJTable);
        if (messageJTable.getColumnModel().getColumnCount() > 0) {
            messageJTable.getColumnModel().getColumn(0).setResizable(false);
            messageJTable.getColumnModel().getColumn(1).setResizable(false);
            messageJTable.getColumnModel().getColumn(2).setResizable(false);
            messageJTable.getColumnModel().getColumn(3).setResizable(false);
            messageJTable.getColumnModel().getColumn(4).setResizable(false);
        }

        providerJComboBox.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        providerJComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                providerJComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(191, 191, 191)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(backJButton)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jScrollPane1)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(assignJButton)
                            .addGap(159, 159, 159)
                            .addComponent(approveJButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(305, 305, 305)
                        .addComponent(rejectJButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addComponent(jLabel1))
                    .addComponent(providerJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(245, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel1)
                .addGap(27, 27, 27)
                .addComponent(providerJComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(assignJButton)
                    .addComponent(approveJButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rejectJButton)
                .addGap(49, 49, 49)
                .addComponent(backJButton)
                .addContainerGap(107, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed
        int selectedRow = messageJTable.getSelectedRow();

        if(selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row from the table.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if(messageJTable.getValueAt(selectedRow, 3) != null){
            JOptionPane.showMessageDialog(null, "The request is already assigned", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        EnrollmentRequest request = (EnrollmentRequest) messageJTable.getValueAt(selectedRow, 0);
        request.setReceiver(userAccount);
        request.setStatus("Pending");
        if(request.getSender().getEmployee().getCheck().equalsIgnoreCase("Hospital")){
            populateHosptialTable();
        } else if(request.getSender().getEmployee().getCheck().equalsIgnoreCase("Pharmacy")){
            populatePharmacyTable();
        }
        JOptionPane.showMessageDialog(null, "The request is assigned to " + request.getReceiver());
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void approveJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_approveJButtonActionPerformed
        int selectedRow = messageJTable.getSelectedRow();

        if(selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row from the table.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if(messageJTable.getValueAt(selectedRow, 4) == "Approved"){
            JOptionPane.showMessageDialog(null, "The request is already approved", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if(messageJTable.getValueAt(selectedRow, 4) == "Rejected"){
            JOptionPane.showMessageDialog(null, "The request is already rejected", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        EnrollmentRequest request = (EnrollmentRequest) messageJTable.getValueAt(selectedRow, 0);
        if(messageJTable.getValueAt(selectedRow, 3) == null){
            JOptionPane.showMessageDialog(null, "The request is yet to be assigned to the State PHD", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        UserAccount userAccount = (UserAccount) request.getSender();
        Employee employee = (Employee) userAccount.getEmployee();
        employee.setEnrollmentStatus("Approved");
        request.setStatus("Approved");
        request.setEnrollmentRequest("Approved");
        if(employee.getCheck().equalsIgnoreCase("hospital")){
            employee.getHospital().setHospitalStatus("Approved");
            populateHosptialTable();
        } else if(employee.getCheck().equalsIgnoreCase("Pharmacy")){
            employee.getPharmacy().setPharmacyStatus("Approved");
            populatePharmacyTable();
        }
        JOptionPane.showMessageDialog(null, "The request is approved", "Enrollment Request", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_approveJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.remove(this);
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void rejectJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rejectJButtonActionPerformed
        int selectedRow = messageJTable.getSelectedRow();

        if(selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row from the table.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if(messageJTable.getValueAt(selectedRow, 4) == "Rejected"){
            JOptionPane.showMessageDialog(null, "The request is already rejected", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if(messageJTable.getValueAt(selectedRow, 4) == "Approved"){
            JOptionPane.showMessageDialog(null, "The request is already Approved", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        EnrollmentRequest request = (EnrollmentRequest) messageJTable.getValueAt(selectedRow, 0);
        if(messageJTable.getValueAt(selectedRow, 3) == null){
            JOptionPane.showMessageDialog(null, "The request is yet to be assigned to the State PHD", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int result = JOptionPane.showConfirmDialog(null, "Are you sure if you want to Reject?", "warning", dialogButton);
        if(result == JOptionPane.YES_OPTION){
            UserAccount userAccount = (UserAccount) request.getSender();
            Employee employee = (Employee) userAccount.getEmployee();
            employee.setEnrollmentStatus("Rejected");
            request.setStatus("Reject");
            request.setEnrollmentRequest("Rejected");
            if(employee.getCheck().equalsIgnoreCase("Hospital")){
                employee.getHospital().setHospitalStatus("Rejected");
                populateHosptialTable();
            } else if(employee.getCheck().equalsIgnoreCase("Pharmacy")){
                employee.getPharmacy().setPharmacyStatus("Rejected");
                populatePharmacyTable();
            }
            
            JOptionPane.showMessageDialog(null, "The request is rejected", "Enrollment Request", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_rejectJButtonActionPerformed

    private void providerJComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_providerJComboBoxActionPerformed
        String provider = (String) providerJComboBox.getSelectedItem();
        if(provider != null){
            if(provider.equalsIgnoreCase("Hospital")){
                populateHosptialTable();
            } else if(provider.equalsIgnoreCase("Pharmacy")){
                populatePharmacyTable();
            }
        }
    }//GEN-LAST:event_providerJComboBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton approveJButton;
    private javax.swing.JButton assignJButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable messageJTable;
    private javax.swing.JComboBox providerJComboBox;
    private javax.swing.JButton rejectJButton;
    // End of variables declaration//GEN-END:variables
}
