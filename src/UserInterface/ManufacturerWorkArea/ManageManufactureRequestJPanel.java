/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.ManufacturerWorkArea;

import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.DistributorEnterprise;
import Business.Enterprise.Enterprise;
import Business.Enterprise.VaccineManufacturesEnterprise;
import Business.Inventory.Inventory;
import Business.Network.Network;
import Business.Order.Order;
import Business.Order.OrderItem;
import Business.Organization.FinanceOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.Vaccine.Vaccine;
import Business.WorkQueue.ManufactureRequest;
import Business.WorkQueue.VaccineRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author rangeshmurali
 */
public class ManageManufactureRequestJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem ecoSystem;
    private UserAccount userAccount;
    private VaccineManufacturesEnterprise vaccineManufacturesEnterprise;

    public ManageManufactureRequestJPanel(JPanel userProcessContainer, EcoSystem ecoSystem, UserAccount userAccount, VaccineManufacturesEnterprise vaccineManufacturesEnterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        this.ecoSystem = ecoSystem;
        this.vaccineManufacturesEnterprise = vaccineManufacturesEnterprise;

        populateManufactureTable();
    }

    public void populateManufactureTable() {
        DefaultTableModel dtm = (DefaultTableModel) manufactureOrderJTable.getModel();
        dtm.setRowCount(0);

        for (WorkRequest request : vaccineManufacturesEnterprise.getWorkQueue().getWorkRequestList()) {
            Object[] row = new Object[5];
            row[0] = request;
            row[1] = request.getRequestedQuantity();
            row[2] = request.getSender();
            row[3] = request.getReceiver() == null ? null : request.getReceiver();
            row[4] = request.getStatus();
            dtm.addRow(row);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        manufactureOrderJTable = new javax.swing.JTable();
        rejectJButton = new javax.swing.JButton();
        viewOrderJButton = new javax.swing.JButton();
        assignJButton = new javax.swing.JButton();
        forwardJButton = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderJTable = new javax.swing.JTable();
        backJButton = new javax.swing.JButton();
        manufactureJButton = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Manage Manufacture Request");

        manufactureOrderJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Request Type", "Requested Quantity", "Employee Name", "Receiver", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(manufactureOrderJTable);

        rejectJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        rejectJButton.setText("Reject");
        rejectJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rejectJButtonActionPerformed(evt);
            }
        });

        viewOrderJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        viewOrderJButton.setText("View Order");
        viewOrderJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewOrderJButtonActionPerformed(evt);
            }
        });

        assignJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        assignJButton.setText("Assign to me");
        assignJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                assignJButtonActionPerformed(evt);
            }
        });

        forwardJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        forwardJButton.setText("Forward to State Distributor");
        forwardJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardJButtonActionPerformed(evt);
            }
        });

        orderJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Vaccine Name", "Vaccine ID", "Disease Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(orderJTable);
        if (orderJTable.getColumnModel().getColumnCount() > 0) {
            orderJTable.getColumnModel().getColumn(0).setResizable(false);
            orderJTable.getColumnModel().getColumn(2).setResizable(false);
        }

        backJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        backJButton.setText("<< Back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        manufactureJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        manufactureJButton.setText("Manufacture Vaccine");
        manufactureJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manufactureJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(183, 183, 183)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(backJButton)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(viewOrderJButton)
                                .addGap(47, 47, 47)
                                .addComponent(assignJButton)
                                .addGap(36, 36, 36)
                                .addComponent(forwardJButton)
                                .addGap(8, 8, 8)
                                .addComponent(rejectJButton))
                            .addComponent(jScrollPane1)
                            .addComponent(jScrollPane2)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(369, 369, 369)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(441, 441, 441)
                        .addComponent(manufactureJButton)))
                .addContainerGap(222, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(manufactureJButton)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewOrderJButton)
                    .addComponent(assignJButton)
                    .addComponent(forwardJButton)
                    .addComponent(rejectJButton))
                .addGap(20, 20, 20)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addComponent(backJButton)
                .addContainerGap(71, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void rejectJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rejectJButtonActionPerformed
        int selectedRow = manufactureOrderJTable.getSelectedRow();
        int quantity = 0;
        int orginalQuantity = 0;

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (manufactureOrderJTable.getValueAt(selectedRow, 4) == "Rejected") {
            JOptionPane.showMessageDialog(null, "The request is already rejected", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (manufactureOrderJTable.getValueAt(selectedRow, 4) == "Approved") {
            JOptionPane.showMessageDialog(null, "The request is already Approved", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        ManufactureRequest request = (ManufactureRequest) manufactureOrderJTable.getValueAt(selectedRow, 0);
        if (manufactureOrderJTable.getValueAt(selectedRow, 3) == null) {
            JOptionPane.showMessageDialog(null, "The request is yet to be assigned to National Distributor", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int dialogButton = JOptionPane.YES_NO_OPTION;
        int result = JOptionPane.showConfirmDialog(null, "Are you sure if you want to Reject?", "warning", dialogButton);
        if (result == JOptionPane.YES_OPTION) {
            UserAccount userAccount = (UserAccount) request.getSender();
            Employee employee = (Employee) userAccount.getEmployee();
            for (Order order : employee.getMasterOrderCatalog().getMasterOrderList()) {
                if (request.getOrderId() == order.getOrderId()) {
                    order.setOrderStatus("Order rejected by National Distributor");
                    request.setStatus("Rejected");
                    request.setManufactureRequest("Rejected");
                    for (OrderItem oi : order.getOrderItemList()) {
                        quantity = oi.getVaccine().getAvailablity();
                        orginalQuantity = quantity + oi.getQuantity();
                        oi.getVaccine().setAvailablity(orginalQuantity);
                    }
                }
            }
        }
        populateManufactureTable();
        JOptionPane.showMessageDialog(null, "The request is rejected", "Vaccine Request", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_rejectJButtonActionPerformed

    private void viewOrderJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewOrderJButtonActionPerformed
        int selectedRow = manufactureOrderJTable.getSelectedRow();
        if (selectedRow >= 0) {
            ManufactureRequest request = (ManufactureRequest) manufactureOrderJTable.getValueAt(selectedRow, 0);
            DefaultTableModel dtm = (DefaultTableModel) orderJTable.getModel();
            dtm.setRowCount(0);

            for (Vaccine vaccine : ecoSystem.getVaccineDirectory().getVaccineDirectory()) {
                if (vaccine.getVaccineId() == request.getOrderId()) {
                    Object[] row = new Object[3];
                    row[0] = vaccine;
                    row[1] = vaccine.getVaccineId();
                    row[2] = vaccine.getDiseasesName();
                    dtm.addRow(row);
                }
            }

        } else {
            JOptionPane.showMessageDialog(null, "Please select a row first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
    }//GEN-LAST:event_viewOrderJButtonActionPerformed

    private void assignJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_assignJButtonActionPerformed
        int selectedRow = manufactureOrderJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (manufactureOrderJTable.getValueAt(selectedRow, 3) != null) {
            JOptionPane.showMessageDialog(null, "The request is already assigned", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        ManufactureRequest request = (ManufactureRequest) manufactureOrderJTable.getValueAt(selectedRow, 0);
        request.setReceiver(userAccount);
        request.setStatus("Pending");
        UserAccount user = (UserAccount) request.getSender();
        Employee person = (Employee) user.getEmployee();
        for (Order order : person.getMasterOrderCatalog().getMasterOrderList()) {
            if (request.getOrderId() == order.getOrderId()) {
                order.setOrderStatus("Waiting to be approved by National Distributor");
            }
        }
        populateManufactureTable();
        JOptionPane.showMessageDialog(null, "The request is assigned to " + request.getReceiver());
    }//GEN-LAST:event_assignJButtonActionPerformed

    private void forwardJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardJButtonActionPerformed
        int selectedRow = manufactureOrderJTable.getSelectedRow();

        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row from the table.", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (manufactureOrderJTable.getValueAt(selectedRow, 4) == "Approved") {
            JOptionPane.showMessageDialog(null, "The request is already sent to State Distributor", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        if (manufactureOrderJTable.getValueAt(selectedRow, 4) == "Rejected") {
            JOptionPane.showMessageDialog(null, "The request is already rejected", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }

        ManufactureRequest request = (ManufactureRequest) manufactureOrderJTable.getValueAt(selectedRow, 0);
        if (manufactureOrderJTable.getValueAt(selectedRow, 3) == null) {
            JOptionPane.showMessageDialog(null, "The request is yet to be assigned to National Distributor", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        request.setStatus("Approved");
        request.setManufactureRequest("Approved");
        UserAccount user = (UserAccount) request.getSender();
        Employee employee = (Employee) user.getEmployee();
        for (Order order : employee.getMasterOrderCatalog().getMasterOrderList()) {
            if (request.getOrderId() == order.getOrderId()) {
                order.setOrderStatus("Approved by National Distributor");
            }
        }
        ManufactureRequest manufactureRequest = new ManufactureRequest();
        manufactureRequest.setRequestType("Manufacture Vaccine Request");
        manufactureRequest.setStatus("waiting");
        manufactureRequest.setSender(request.getSender());
        manufactureRequest.setOrderId(request.getOrderId());
        manufactureRequest.setReceiver(null);
        manufactureRequest.setRequestedQuantity(request.getRequestedQuantity());
        Enterprise e = null;
        Network net = null;
        Organization org = null;
        for (Network network : ecoSystem.getNetworkDirectory()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterprisesDirectory()) {
                for (UserAccount userAccount1 : enterprise.getUserAccountDirectory().getUserAccountDirectory()) {
                    if (userAccount == userAccount1) {
                        net = network;
                        break;
                    }
                }
            }
        }

        for (Enterprise ent : net.getEnterpriseDirectory().getEnterprisesDirectory()) {
            if (ent instanceof VaccineManufacturesEnterprise) {
                e = ent;
                break;
            }
        }
        for (Organization organization: e.getOrganizationDriectory().getOrganizationDirectory()) {
            if (organization instanceof FinanceOrganization) {
                org = organization;
            }
        }
        if (org!= null) {
            org.getWorkQueue().getWorkRequestList().add(manufactureRequest);
            userAccount.getWorkQueue().getWorkRequestList().add(manufactureRequest);
        }

        populateManufactureTable();
    }//GEN-LAST:event_forwardJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.remove(this);
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed

    private void manufactureJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manufactureJButtonActionPerformed
        int selectedRow = manufactureOrderJTable.getSelectedRow();
        if (selectedRow >= 0) {
            ManufactureRequest manufactureRequest = (ManufactureRequest) manufactureOrderJTable.getValueAt(selectedRow, 0);
            UserAccount userAccount = (UserAccount) manufactureRequest.getSender();
            int requestedQuantity = manufactureRequest.getRequestedQuantity();
            Enterprise ent = null;
            for (Network network : ecoSystem.getNetworkDirectory()) {
                for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterprisesDirectory()) {
                    for (UserAccount ua : enterprise.getUserAccountDirectory().getUserAccountDirectory()) {
                        if (ua == userAccount) {
                            ent = enterprise;
                        }
                    }
                }
            }
            for (Organization organization : ent.getOrganizationDriectory().getOrganizationDirectory()) {
                for (Inventory inventory : organization.getInventoryDirectory().getInventoryDirectory()) {
                    if (manufactureRequest.getOrderId() == inventory.getVaccine().getVaccineId()) {
                        ManufactureVaccineJPanel manufactureVaccineJPanel = new ManufactureVaccineJPanel(userProcessContainer, inventory, requestedQuantity);
                        userProcessContainer.add("manufactureVaccineJPanel", manufactureVaccineJPanel);
                        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
                        layout.next(userProcessContainer);
                    }
                }
            }
        }
    }//GEN-LAST:event_manufactureJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton assignJButton;
    private javax.swing.JButton backJButton;
    private javax.swing.JButton forwardJButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton manufactureJButton;
    private javax.swing.JTable manufactureOrderJTable;
    private javax.swing.JTable orderJTable;
    private javax.swing.JButton rejectJButton;
    private javax.swing.JButton viewOrderJButton;
    // End of variables declaration//GEN-END:variables
}
