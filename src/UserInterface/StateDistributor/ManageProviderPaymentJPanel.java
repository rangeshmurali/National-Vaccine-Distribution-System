/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.StateDistributor;

import Business.EcoSystem;
import Business.Employee.Employee;
import Business.Enterprise.DistributorEnterprise;
import Business.Enterprise.Enterprise;
import Business.Enterprise.ProviderEnterprise;
import Business.Network.Network;
import Business.Order.Order;
import Business.Order.OrderItem;
import Business.Organization.AdminOrganization;
import Business.Organization.FinanceOrganization;
import Business.Organization.OrderOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.PaymentRequest;
import Business.WorkQueue.VaccineRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import java.security.Provider;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author rangeshmurali
 */
public class ManageProviderPaymentJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem ecoSystem;
    private UserAccount userAccount;
    private DistributorEnterprise distributorEnterprise;
    private float total;
    private int oId;

    public ManageProviderPaymentJPanel(JPanel userProcessContainer, EcoSystem ecoSystem, UserAccount userAccount, DistributorEnterprise distributorEnterprise) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.ecoSystem = ecoSystem;
        this.userAccount = userAccount;
        this.distributorEnterprise = distributorEnterprise;

        populateVaccineOrderTable();
    }

    public void populateVaccineOrderTable() {
        DefaultTableModel dtm = (DefaultTableModel) billJTable.getModel();
        dtm.setRowCount(0);

        for (Organization organization : distributorEnterprise.getOrganizationDriectory().getOrganizationDirectory()) {
            for (WorkRequest request : organization.getWorkQueue().getWorkRequestList()) {
                for (Order order : request.getSender().getEmployee().getMasterOrderCatalog().getMasterOrderList()) {
                    if (request.getOrderId() == order.getOrderId()) {
                        float totalPrice = 0;
                        for (OrderItem orderItem : order.getOrderItemList()) {
                            float price = orderItem.getVaccine().getPrice() * orderItem.getQuantity();
                            totalPrice = totalPrice + price;
                        }
                        Object[] row = new Object[5];
                        row[0] = order.getOrderId();
                        if (request.getSender().getEmployee().getCheck().equalsIgnoreCase("Hospital")) {
                            row[1] = request.getSender().getEmployee().getHospital().getHospitalName();
                        } else if (request.getSender().getEmployee().getCheck().equalsIgnoreCase("Pharmacy")) {
                            row[1] = request.getSender().getEmployee().getPharmacy().getPharmacyName();
                        }
                        row[2] = totalPrice;
                        for (WorkRequest request1 : userAccount.getWorkQueue().getWorkRequestList()) {
                            if (order.getOrderId() == request1.getOrderId()) {
                                row[3] = request1.getReceiver();
                                row[4] = request1.getStatus();
                            }
                        }
                        dtm.addRow(row);
                    }
                }
            }

        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        billJTable = new javax.swing.JTable();
        viewOrderJButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        orderJTable = new javax.swing.JTable();
        titleJLabel = new javax.swing.JLabel();
        sendJButton = new javax.swing.JButton();
        backJButton = new javax.swing.JButton();

        billJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Order ID", "Provider Name", "Total Price", "Receiver", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(billJTable);
        if (billJTable.getColumnModel().getColumnCount() > 0) {
            billJTable.getColumnModel().getColumn(0).setResizable(false);
            billJTable.getColumnModel().getColumn(1).setResizable(false);
            billJTable.getColumnModel().getColumn(2).setResizable(false);
            billJTable.getColumnModel().getColumn(3).setResizable(false);
            billJTable.getColumnModel().getColumn(4).setResizable(false);
        }

        viewOrderJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        viewOrderJButton.setText("View Order");
        viewOrderJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewOrderJButtonActionPerformed(evt);
            }
        });

        orderJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Vaccine Name", "Vaccine ID", "Quantity", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(orderJTable);
        if (orderJTable.getColumnModel().getColumnCount() > 0) {
            orderJTable.getColumnModel().getColumn(0).setResizable(false);
            orderJTable.getColumnModel().getColumn(1).setResizable(false);
            orderJTable.getColumnModel().getColumn(2).setResizable(false);
            orderJTable.getColumnModel().getColumn(3).setResizable(false);
        }

        titleJLabel.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        titleJLabel.setText("Manage Provider Payment");

        sendJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        sendJButton.setText("Send Bill");
        sendJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendJButtonActionPerformed(evt);
            }
        });

        backJButton.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        backJButton.setText("<< back");
        backJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(270, 270, 270)
                        .addComponent(titleJLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jScrollPane2)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 748, Short.MAX_VALUE))
                            .addComponent(backJButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(139, 139, 139)
                        .addComponent(viewOrderJButton)
                        .addGap(195, 195, 195)
                        .addComponent(sendJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(116, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {sendJButton, viewOrderJButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(titleJLabel)
                .addGap(54, 54, 54)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(viewOrderJButton)
                    .addComponent(sendJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(43, 43, 43)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81)
                .addComponent(backJButton)
                .addContainerGap(135, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {sendJButton, viewOrderJButton});

    }// </editor-fold>//GEN-END:initComponents

    private void viewOrderJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewOrderJButtonActionPerformed
        int selectedRow = billJTable.getSelectedRow();
        if (selectedRow >= 0) {
            int orderId = (Integer) billJTable.getValueAt(selectedRow, 0);
            DefaultTableModel dtm = (DefaultTableModel) orderJTable.getModel();
            dtm.setRowCount(0);

            Enterprise enterprise = null;
            Network net = null;
            Organization org = null;
            UserAccount u = null;
            for (Network network : ecoSystem.getNetworkDirectory()) {
                for (Enterprise ent : network.getEnterpriseDirectory().getEnterprisesDirectory()) {
                    if (ent == distributorEnterprise) {
                        net = network;
                    }
                }
            }
            for (Enterprise ent : net.getEnterpriseDirectory().getEnterprisesDirectory()) {
                if (ent instanceof ProviderEnterprise) {
                    enterprise = ent;
                    break;
                }
            }
            UserAccount uu = null;
            for (Organization o : enterprise.getOrganizationDriectory().getOrganizationDirectory()) {
                if (o instanceof OrderOrganization) {
                    for (UserAccount user : o.getUserAccountDirectory().getUserAccountDirectory()) {
                        uu = user;
                    }
                }
            }
            Order orderI = null;
            for (Order order : uu.getEmployee().getMasterOrderCatalog().getMasterOrderList()) {
                if (orderId == order.getOrderId()) {
                    orderI = order;
                }
            }
            for (OrderItem orderItem : orderI.getOrderItemList()) {
                Object[] row = new Object[4];
                row[0] = orderItem;
                row[1] = orderItem.getVaccine().getVaccineId();
                row[2] = orderItem.getQuantity();
                row[3] = orderItem.getVaccine().getPrice();
                dtm.addRow(row);
            }
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row first", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
    }//GEN-LAST:event_viewOrderJButtonActionPerformed

    private void sendJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendJButtonActionPerformed
        int selectedRow = billJTable.getSelectedRow();
        int orderId = (Integer) billJTable.getValueAt(selectedRow, 0);
        Order order = null;
        PaymentRequest request = new PaymentRequest();
        request.setRequestType("Provider Payment Request");
        request.setStatus("Sent");
        request.setPaymentRequest("Sent");
        request.setSender(userAccount);
        Enterprise enterprise = null;
        Network net = null;
        Organization org = null;
        UserAccount u = null;
        for (Network network : ecoSystem.getNetworkDirectory()) {
            for (Enterprise ent : network.getEnterpriseDirectory().getEnterprisesDirectory()) {
                if (ent == distributorEnterprise) {
                    net = network;
                }
            }
        }
        for (Enterprise ent : net.getEnterpriseDirectory().getEnterprisesDirectory()) {
            if (ent instanceof ProviderEnterprise) {
                enterprise = ent;
                break;
            }
        }
        for (Organization organization : enterprise.getOrganizationDriectory().getOrganizationDirectory()) {
            if (organization instanceof FinanceOrganization) {
                org = organization;
            }
        }
        for (UserAccount user : org.getUserAccountDirectory().getUserAccountDirectory()) {
            if(user.getEmployee().getHospital().getHospitalName() == billJTable.getValueAt(selectedRow, 1)){
                u = user;
                JOptionPane.showMessageDialog(null, user.getEmployee().getEmployeeName());
            }
        }

        UserAccount uu = null;
        for (Organization o : enterprise.getOrganizationDriectory().getOrganizationDirectory()) {
            if (o instanceof OrderOrganization) {
                for (UserAccount user : o.getUserAccountDirectory().getUserAccountDirectory()) {
                    uu = user;
                }
            }
        }

        for (Order o : uu.getEmployee().getMasterOrderCatalog().getMasterOrderList()) {
            if (o.getOrderId() == orderId) {
                order = o;
            }
        }

        request.setOrderId(order.getOrderId());

        if (u != null) {
            u.getWorkQueue().getWorkRequestList().add(request);
            userAccount.getWorkQueue().getWorkRequestList().add(request);
            populateVaccineOrderTable();
            JOptionPane.showMessageDialog(null, "Bill sent successfully", "Payment Request", JOptionPane.INFORMATION_MESSAGE);
        }


    }//GEN-LAST:event_sendJButtonActionPerformed

    private void backJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButtonActionPerformed
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        userProcessContainer.remove(this);
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_backJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton;
    private javax.swing.JTable billJTable;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable orderJTable;
    private javax.swing.JButton sendJButton;
    private javax.swing.JLabel titleJLabel;
    private javax.swing.JButton viewOrderJButton;
    // End of variables declaration//GEN-END:variables
}
